class Solution(object):
    # Fist solution: single End BFS
    def EndBFS(self, beginWord, endWord, unvisited, dictionary):
        flagFound = False
        unvisited.add(beginWord)
        unvisited.remove(endWord)
        queue = set()
        queue.add(endWord)
        
        while not flagFound and len(queue) != 0:
            samelevel = set()
            for word in queue:
                if word == beginWord:
                    flagFound = True
                   
                for i in range(len(word)):
                    left = word[:i]
                    right = word[i+1:]
                    
                    for c in 'abcdefghijklmnopqrstuvwxyz':
                        nextWord = left + c + right
                        if c != word[i] and nextWord in unvisited:
                            dictionary[nextWord].append(word)
                            if nextWord not in samelevel:
                                samelevel.add(nextWord)
                                
            queue = samelevel
            unvisited -= samelevel
    # Second solution: Double End BFS        
    def DoubleEndBFS(self, beginWord, endWord, unvisited, dictionary):
        flagFound = False
        flagSwitch = True
        
        BeginSet = set()
        BeginSet.add(beginWord)
        EndSet = set()
        EndSet.add(endWord)
       
        while not flagFound and len(EndSet)!= 0 :
            samelevel = set()
            unvisited -= EndSet
            
            for word in EndSet:
                for i in range(len(word)):
                    left = word[:i]
                    right = word[i+1:]
                    
                    for c in 'abcdefghijklmnopqrstuvwxyz':
                        nextWord = left + c + right
                        if c != word[i] and nextWord in unvisited:
                            if flagSwitch:
                                dictionary[nextWord].append(word)
                            else:
                                dictionary[word].append(nextWord)
                            
                            if nextWord not in samelevel:
                                samelevel.add(nextWord)
                           
            EndSet = samelevel
           
            if BeginSet & EndSet:
                flagFound = True
                break
                
            if len(EndSet) > len(BeginSet):
                flagSwitch = not flagSwitch
                BeginSet, EndSet = EndSet, BeginSet

        
    def BeginDFS(self, begin, end, dictionary, results, path):
        if begin == end:
           results.append(list(path))
           return
            
        for nextnode in dictionary[begin]:
            self.BeginDFS(nextnode, end, dictionary, results, path + [nextnode])
        
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
    
        unvisited = set(wordList)
        if endWord not in unvisited:
            return []
            
        dictionary = collections.defaultdict(list)
        flagFound = self.DoubleEndBFS(beginWord, endWord, unvisited, dictionary)
        
        #flagFound = self.EndBFS(beginWord, endWord, unvisited, dictionary)
        if flagFound:
            return []
        
  
        path = [beginWord]
        results = []
        
        self.BeginDFS(beginWord, endWord, dictionary, results, path)
        
        return results
